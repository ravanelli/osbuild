#!/usr/bin/python3

import hashlib
import json
import os
import subprocess
import sys

import osbuild.api

def get_os_name(deployed_tree):
    with open(os.path.join(deployed_tree, 'usr/share/rpm-ostree/treefile.json')) as f:
        treefile = json.load(f)
    return treefile['rojig']['name']


def sha256sum_file(path):
    """
    Calculates the sha256 sum from a path.

    :param path: The full path to the file
    :type: path: str
    :returns: The calculated sha256 sum
    :type: str
    """
    h = hashlib.sha256()
    with open(path, 'rb', buffering=0) as f:
        for b in iter(lambda: f.read(128 * 1024), b''):
            h.update(b)
    return h.hexdigest()


def parse_os_release(deployed_tree):
    r = dict()
    with open(os.path.join(deployed_tree, 'etc/os-release')) as f:
        for line in f:
            k, v = line.split('=', 1)
            r[k] = v.strip(" \n\t'\"")
    return r


def main(inputs, devices, tree, options):
    img_type = options['image_type']
    rootfs = inputs['tree']['path']
    os_release = parse_os_release(inputs['tree']['path'])

    usr = os.path.join(rootfs, "usr")
    etc = os.path.join(rootfs, "etc")
    for img in ['metal', 'metal4k']:

        image = devices[img]['path']
        cmd = ['coreos-installer', 'pack', img_type, image]
        fast_arg = []

        if img_type != "osmet":
            basearch = os.uname().machine
            base_name = get_os_name(inputs['tree']['path'])
            version = os_release['OSTREE_VERSION']
            iso_name = f'{base_name}-{version}-live.{basearch}.iso'
            tmpisofile = os.path.join(tree, iso_name)
            extra_cmd = [tmpisofile, f'{tmpisofile}.minimal', '--consume']
        else:
            if options['fast']:
                fast = ['--fast']
            img_checksum = sha256sum_file(image)
            tmpinitrd_rootfs = os.path.join(tree, 'initrd-rootfs')
            os.makedirs(tmpinitrd_rootfs, exist_ok=True)
            img_osmet = os.path.join(tmpinitrd_rootfs, f'{img}.osmet')
            extra_cmd = ['--description', os_release['PRETTY_NAME'], '--checksum',
            img_checksum, '--output', img_osmet] + fast

        cmd += extra_cmd + fast_arg
        subprocess.check_call(["bwrap", "--unshare-pid", "--unshare-uts", "--unshare-ipc", "--dev-bind", "/dev", "/dev",
                           "--ro-bind", "/sys", "/sys", "--proc", "/proc", "--chdir", "/", "--ro-bind", usr, "/usr",
                           "--ro-bind", etc, "/etc", "--dir", "/tmp", "--tmpfs", "/var/tmp", "--tmpfs", "/run",
                           "--bind", "/run/osbuild", "/run/osbuild",
                           "--symlink", "usr/lib", "/lib", "--symlink", "usr/lib64", "/lib64",
                           "--symlink", "usr/bin", "/bin", "--symlink", "usr/sbin", "/sbin"] + cmd)


if __name__ == "__main__":
    args = osbuild.api.arguments()
    r = main(args["inputs"], args["devices"], args["tree"], args["options"])
    sys.exit(r)
